- name: Create InfluxDB directory structure
  file:
    path: "{{ item }}"
    state: directory
    owner: nobody
    group: nogroup
    mode: 0755
  with_items:
    - "{{ influxdb_backup_path }}"
    - "{{ influxdb_data_path }}"

- name: Pull InfluxDB docker image
  docker_image:
    name: "{{ influxdb_docker_image_name }}:{{ influxdb_docker_image_version }}"
    source: pull

- name: Run InfluxDB docker container
  docker_container:
    name: influxdb
    image: "{{ influxdb_docker_image_name }}:{{ influxdb_docker_image_version }}"
    state: started
    container_default_behavior: no_defaults
    detach: true
    init: true
    restart_policy: on-failure
    restart_retries: 3
    auto_remove: yes
    memory: "{{ influxdb_docker_memory }}"
    user: nobody:nogroup
    env: "{{ influxdb_config_env }}"
    published_ports:
      - 9999:9999
    mounts:
      - source: "{{ influxdb_backup_path }}"
        target: /var/backups/influxdb
        type: bind
      - source: "{{ influxdb_data_path }}"
        target: /var/lib/influxdb
        type: bind

- name: Wait for InfluxDB to become available
  uri:
    url: http://localhost:9999
  register: _result
  until: _result.status == 200
  retries: 60
  delay: 1

- name: Setup InfluxDB
  command: |
    docker exec -it influxdb \
    influx setup \
    --username '{{ influxdb_primary_user_name }}' \
    --password '{{ influxdb_primary_user_password }}' \
    --org '{{ influxdb_primary_organization_name }}' \
    --bucket '{{ influxdb_primary_bucket_name }}' \
    --retention '{{ influxdb_primary_bucket_name_retention_period }}' \
    --force
  args:
    creates: "{{ influxdb_data_path }}/configs"

- name: Find InfluxDB users
  command: |
    docker exec -it influxdb \
    influx user list \
    --name '{{ item.name }}'
  failed_when: false
  changed_when: false
  loop: "{{ influxdb_users }}"
  register: found_users

- name: Create InfluxDB users
  command: |
    docker exec -it influxdb \
    influx user create \
    --name '{{ item.0.name }}' \
    --password '{{ item.0.password }}' \
    --org '{{ influxdb_primary_organization_name }}'
  when: item.1.rc != 0
  loop: "{{ influxdb_users | zip(found_users.results) | list }}"

- name: Find InfluxDB buckets
  command: |
    docker exec -it influxdb \
    influx bucket list \
    --name '{{ item.name }}'
  failed_when: false
  changed_when: false
  loop: "{{ influxdb_buckets }}"
  register: found_buckets

- name: Create InfluxDB buckets
  command: |
    docker exec -it influxdb \
    influx bucket create \
    --name '{{ item.name }}' \
    --description '{{ item.description }}' \
    --org '{{ influxdb_primary_organization_name }}'
    --retention '{{ item.retention }}'
  loop: "{{ influxdb_buckets | zip(found_buckets.results) | list }}"

- name: Create InfluxDB backup script
  template:
    src: backup_influxdb.sh.j2
    dest: /usr/local/bin/backup_influxdb.sh
    owner: root
    group: root
    mode: 0755

- name: Add cronjob to backup InfluxDB
  cron:
    name: Backup InfluxDB
    minute: "30"
    hour: "4"
    job: "/usr/local/bin/backup_influxdb.sh || echo \"ERROR: A problem occurred during backup of InfluxDB. Please check the logfiles. journalctl -t backup_influxdb.sh\""
    user: root
